#!/usr/bin/env python
# coding: UTF-8

print('Hello World!')

#动态类型(dynamic typing)是Python另一个重要的核心概念。
#我们之前说过，Python的变量(variable)不需要声明，而在赋值时，变量可以重新赋值为任意值。

#在我们接触的对象中，有一类特殊的对象，是用于存储数据的。常见的该类对象包括各种数字，字符串，表，词典。在Python中，这些是对象。
#对象是储存在内存中的实体。但我们并不能直接接触到该对象。我们在程序中写的对象名，只是指向这一对象的引用(reference)。
#引用和对象分离，是动态类型的核心。

#引用可以随时指向一个新的对象：
e = 3           #第一个语句中，3是储存在内存中的一个整数对象。通过赋值，引用a指向对象3。
e = 'at'       #第二个语句中，内存中建立对象‘at’，是一个字符串(string)。引用e指向了'at'。此时，对象3不再有引用指向它。
#Python会自动将没有引用指向的对象销毁(destruct)，释放相应内存。
#(对于小的整数和短字符串，Python会缓存这些对象，而不是频繁的建立和销毁。)

a = 5
b = a
a = a + 2
print (a,b)

L1 = [1,2,3]
L2 = L1
L1 = 1
print(L1,L2)

#列表可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为可变数据对象(mutable object)，词典也是这样的数据类型。
#而像之前的数字和字符串，不能改变对象本身，只能改变引用的指向，称为不可变数据对象(immutable object)。
#我们之前学的元组(tuple)，尽管可以调用引用元素，但不可以赋值，因此不能改变对象自身，所以也算是immutable object.
L3 = [1,2,3]
L4 = L3
L3[0] = 10
print(L3,L4)


# TEST 1： 
def f(x):
    print( "====1======", x ) # x = a ，指向a所指的地址
    x = 100                                   # x=100, 指向新地址
    print( "====2======", x )

a = 1 #不可变对象
f(a)
print( "====3======", a )   # 1

# TEST 2： 
def fn(x):
    print( "====1======", x )  # x = t, 指向t的地址
    x[0] = 100                              #x[0] = 100 , 改变了t指向的地址的值
    print( "====2======", x )

t = [1,2,3]
fn(t) 
print( "====3======", t )   # 1

input('Please enter a code to quit:')



 
 